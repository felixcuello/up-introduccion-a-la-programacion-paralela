@article{ekert1996,
  title={Quantum computation and Shor's factoring algorithm},
  author={Ekert, Artur and Jozsa, Richard},
  journal={Reviews of Modern Physics},
  volume={68},
  number={3},
  pages={733},
  year={1996},
  publisher={APS}
}

@book{greenlaw1995,
  title={Limits to parallel computation: P-completeness theory},
  author={Greenlaw, Raymond and Hoover, H James and Ruzzo, Walter L},
  year={1995},
  publisher={Oxford university press}
}

@article{stockmeyer1987,
  title={Classifying the computational complexity of problems},
  volume={52},
  DOI={10.2307/2273858},
  number={1},
  journal={The Journal of Symbolic Logic},
  author={Stockmeyer, Larry},
  year={1987},
  pages={1–43}
}

@InProceedings{stratton2008,
  author="Stratton, John A.
  and Stone, Sam S.
  and Hwu, Wen-mei W.",
  editor="Amaral, Jos{\'e} Nelson",
  title="MCUDA: An Efficient Implementation of CUDA Kernels for Multi-core CPUs",
  booktitle="Languages and Compilers for Parallel Computing",
  year="2008",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="16--30",
  abstract="CUDA is a data parallel programming model that supports several key abstractions - thread blocks, hierarchical memory and barrier synchronization - for writing applications. This model has proven effective in programming GPUs. In this paper we describe a framework called MCUDA, which allows CUDA programs to be executed efficiently on shared memory, multi-core CPUs. Our framework consists of a set of source-level compiler transformations and a runtime system for parallel execution. Preserving program semantics, the compiler transforms threaded SPMD functions into explicit loops, performs fission to eliminate barrier synchronizations, and converts scalar references to thread-local data to replicated vector references. We describe an implementation of this framework and demonstrate performance approaching that achievable from manually parallelized and optimized C code. With these results, we argue that CUDA can be an effective data-parallel programming model for more than just GPU architectures.",
  isbn="978-3-540-89740-8"
}

@article{sutter2005,
  author = {Sutter, Herb and Larus, James},
  title = {Software and the Concurrency Revolution: Leveraging the full power of multicore processors demands new tools and new thinking from the software industry.},
  year = {2005},
  issue_date = {September 2005},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {3},
  number = {7},
  issn = {1542-7730},
  url = {https://doi.org/10.1145/1095408.1095421},
  doi = {10.1145/1095408.1095421},
  abstract = {Concurrency has long been touted as the "next big thing" and "the way of the future," but for the past 30 years, mainstream software development has been able to ignore it. Our parallel future has finally arrived: new machines will be parallel machines, and this will require major changes in the way we develop software. The introductory article in this issue describes the hardware imperatives behind this shift in computer architecture from uniprocessors to multicore processors, also known as CMPs.},
  journal = {Queue},
  month = sep,
  pages = {54–62},
  numpages = {9}
}

@book{wilf2002,
  title={Algorithms and complexity},
  author={Wilf, Herbert S},
  year={2002},
  publisher={AK Peters/CRC Press}
}
